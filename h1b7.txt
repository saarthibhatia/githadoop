import java.io.*;

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;

import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;

import org.apache.hadoop.util.*;

public class h1b7 extends Configured implements Tool
{
   //Map class  EMPID..NAME..AGE..GENDER..SAL
   
   public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
   {
      public void map(LongWritable key, Text value, Context context)
      {
         try{
            String[] str = value.toString().split(";");
            String year=str[7];
            context.write(new Text(year), new Text(value));
         }
         catch(Exception e)
         {
            System.out.println(e.getMessage());
         }
      }
   }
  
   //Reducer class
   
   public static class ReduceClass extends Reducer<Text,Text,Text,IntWritable>
   {
      public int cnt = 0;
      public void reduce(Text key, Iterable <Text> values, Context context) throws IOException, InterruptedException
      {
         
           
         for (Text val : values)
         {
            cnt++;
         }
           
         context.write(new Text(key), new IntWritable(cnt));
      }
   }
  
   //Partitioner class
   
   public static class CaderPartitioner extends
   Partitioner < Text, Text >
   {
      @Override
      public int getPartition(Text key, Text value, int numReduceTasks)
      {
         String[] str = value.toString().split(";");
         int year = Integer.parseInt(str[7]);
        
         if(numReduceTasks == 0)
         {
            return 0;
         }
        
         if(year==2011)
         {
            return 0;
         }
         else if(year==2012)
         {
            return 1;
         }
         else if(year==2013)
         {
            return 2;
         }
         else if(year==2014)
         {
            return 3;
         }
         else if(year==2015)
         {
            return 4;
         }
         else 
         {
            return 5;
         }
		
         
      }
   }
  
   public int run(String[] arg) throws Exception
   {
      Configuration conf = getConf();
      @SuppressWarnings("deprecation")
   
       
      Job job=new Job(conf,"topsal");   
      job.setJarByClass(h1b7.class);
       
      FileInputFormat.setInputPaths(job, new Path(arg[0]));
      FileOutputFormat.setOutputPath(job,new Path(arg[1]));
       
      job.setMapperClass(MapClass.class);
       
      job.setMapOutputKeyClass(Text.class);
      job.setMapOutputValueClass(Text.class);
     
      //set partitioner statement
       
      job.setPartitionerClass(CaderPartitioner.class);
      job.setReducerClass(ReduceClass.class);
      job.setNumReduceTasks(6);
      job.setInputFormatClass(TextInputFormat.class);
       
      job.setOutputFormatClass(TextOutputFormat.class);
      job.setOutputKeyClass(Text.class);
      job.setOutputValueClass(IntWritable.class);
       
      System.exit(job.waitForCompletion(true)? 0 : 1);
      return 0;
   }
  
   public static void main(String ar[]) throws Exception
   {
      int res = ToolRunner.run(new Configuration(), new h1b7(),ar);
      System.exit(0);
   }
}
